
{-# OPTIONS --without-K --exact-split --safe #-}

module Base.Structures.Sigma.Congruences where

open import Agda.Primitive   using () renaming ( Set to Type ; lzero to РёЊРѓђ )
open import Data.Product     using ( _,_ ; _├Ќ_ ; ╬Б-syntax ) renaming ( projРѓЂ to fst )
open import Function         using ( _Рѕў_ )
open import Level            using (  _Ріћ_ ; suc ; Level ; Lift ; lift ; lower )
open import Relation.Unary   using ( Pred ; _Рѕѕ_ )
open import Relation.Binary  using ( IsEquivalence ) renaming ( Rel to BinRel )
open import Relation.Binary.PropositionalEquality using ( _РЅА_ )

open import Overture        using ( РѕБ_РѕБ )
open import Base.Equality   using ( swelldef )
open import Base.Relations  using ( _|:_ ; 0[_] ; Equivalence ; РЪф_РЪФ ; Рїъ_РїЪ )
                            using ( 0[_]Equivalence ; _/_ ; РЪф_Рѕ╝_РЪФ-elim ; Quotient )
open import Base.Structures.Sigma.Basic
                            using ( Signature ; Structure ; _рхњ_ ; Compatible ; _╩│_ )

private variable ­ЮЉЁ ­Юљ╣ : Signature

module _ {╬▒ ¤Ђ : Level} where

 Con : (­ЮЉе : Structure ­ЮЉЁ ­Юљ╣ {╬▒}{¤Ђ}) Рєњ Type (suc (╬▒ Ріћ ¤Ђ))
 Con ­ЮЉе = ╬Б[ ╬И Рѕѕ Equivalence РѕБ ­ЮЉе РѕБ{╬▒ Ріћ ¤Ђ} ] (Compatible ­ЮЉе РѕБ ╬И РѕБ)

 0[_]Compatible :  (­ЮЉе : Structure ­ЮЉЁ ­Юљ╣ {╬▒}{¤Ђ}) Рєњ swelldef РёЊРѓђ ╬▒
  Рєњ                (­ЮЉЊ : РѕБ ­Юљ╣ РѕБ) Рєњ (­ЮЉЊ рхњ ­ЮЉе) |: (0[ РѕБ ­ЮЉе РѕБ ]{¤Ђ})

 0[ ­ЮЉе ]Compatible wd ­ЮЉЊ {i}{j} ptws0  = lift ╬│
  where
  ╬│ : (­ЮЉЊ рхњ ­ЮЉе) i РЅА (­ЮЉЊ рхњ ­ЮЉе) j
  ╬│ = wd (­ЮЉЊ рхњ ­ЮЉе) i j (lower Рѕў ptws0)

 0Con[_] : (­ЮЉе : Structure ­ЮЉЁ ­Юљ╣ {╬▒}{¤Ђ}) Рєњ swelldef РёЊРѓђ ╬▒ Рєњ Con ­ЮЉе
 0Con[ ­ЮЉе ] wd = 0[ РѕБ ­ЮЉе РѕБ ]Equivalence , 0[ ­ЮЉе ]Compatible wd

 _РЋ▒_ : (­ЮЉе : Structure ­ЮЉЁ ­Юљ╣ {╬▒}{¤Ђ}) Рєњ Con ­ЮЉе Рєњ Structure ­ЮЉЁ ­Юљ╣ {suc (╬▒ Ріћ ¤Ђ)}{¤Ђ}

 ­ЮЉе РЋ▒ ╬И =  ( Quotient (РѕБ ­ЮЉе РѕБ) {╬▒ Ріћ ¤Ђ} РѕБ ╬И РѕБ)       -- domain of quotient structure
          , (╬╗ r x Рєњ (r ╩│ ­ЮЉе) ╬╗ i Рєњ Рїъ x i РїЪ)       -- interpretation of relations
          , ╬╗ f b Рєњ РЪф (f рхњ ­ЮЉе) (╬╗ i Рєњ Рїъ b i РїЪ)  РЪФ  -- interp of operations

 /РЅА-elim :  {­ЮЉе : Structure ­ЮЉЁ ­Юљ╣ {╬▒}{¤Ђ}}( (╬И , _ ) : Con ­ЮЉе){u v : РѕБ ­ЮЉе РѕБ}
  Рєњ         РЪф u РЪФ{РѕБ ╬И РѕБ} РЅА РЪф v РЪФ Рєњ РѕБ ╬И РѕБ u v

 /РЅА-elim ╬И {u}{v} x =  РЪф u Рѕ╝ v РЪФ-elim {R = РѕБ ╬И РѕБ} x

 ­ЮЪў[_РЋ▒_] :  (­ЮЉе : Structure ­ЮЉЁ ­Юљ╣ {╬▒}{¤Ђ})(╬И : Con ­ЮЉе)
  Рєњ        BinRel (РѕБ ­ЮЉе РѕБ / (fst РѕБ ╬И РѕБ)) (suc (╬▒ Ріћ ¤Ђ))

 ­ЮЪў[ ­ЮЉе РЋ▒ ╬И ] = ╬╗ u v Рєњ u РЅА v

­ЮЪј[_РЋ▒_] :  {╬▒ ¤Ђ : Level}(­ЮЉе : Structure ­ЮЉЁ ­Юљ╣ {╬▒}{¤Ђ})(╬И : Con ­ЮЉе)
 Рєњ        swelldef РёЊРѓђ (suc (╬▒ Ріћ ¤Ђ)) Рєњ Con (­ЮЉе РЋ▒ ╬И)

­ЮЪј[ ­ЮЉе РЋ▒ ╬И ] wd = 0[ РѕБ ­ЮЉе РЋ▒ ╬И РѕБ ]Equivalence , 0[ ­ЮЉе РЋ▒ ╬И ]Compatible wd

