
{-# OPTIONS --without-K --exact-split --safe #-}

module Examples.Categories.Functors where

open import Agda.Primitive using ( lsuc ) renaming ( Set to Type ; lzero to ‚Ñì‚ÇÄ )
open import Data.Nat       using ( ‚Ñï ; zero ; suc ; _>_ )
open import Data.Sum.Base  using ( _‚äé_ ) renaming ( inj‚ÇÅ to inl ;  inj‚ÇÇ to inr )
open import Data.Product   using ( Œ£-syntax ; _,_ ; _√ó_ )
open import Level
open import Data.Unit      using () renaming ( tt to ùüé )
open import Relation.Binary.PropositionalEquality  using ( _‚â°_ ; refl ; _‚â¢_ )

open import Base.Categories.Functors using ( List ; list ; _‚ü¶_‚üß ; _[_] ; Œº_ ; Option )

open Œº_
open list

L‚ÇÄ : List ‚Ñï
L‚ÇÄ = inn (inl (Level.lift ùüé))

l‚ÇÄ : list ‚Ñï
l‚ÇÄ = []

L‚ÇÅ : List ‚Ñï
L‚ÇÅ = inn (inr (3 , L‚ÇÄ))

l‚ÇÅ : list ‚Ñï
l‚ÇÅ = 3 ‚à∑ l‚ÇÄ

L‚ÇÉ : List ‚Ñï
L‚ÇÉ = inn (inr (1 , (inn (inr (2 , L‚ÇÄ)))))

l‚ÇÉ : list ‚Ñï
l‚ÇÉ = 1 ‚à∑ (2 ‚à∑ l‚ÇÅ)

open Option

L‚ÇÄ‚â°none : ‚àÄ {n} ‚Üí (L‚ÇÄ [ n ]) ‚â° none
L‚ÇÄ‚â°none = refl

l‚ÇÄ‚â°none : ‚àÄ {n} ‚Üí (l‚ÇÄ ‚ü¶ n ‚üß) ‚â° none
l‚ÇÄ‚â°none = refl

L‚ÇÅ[0]‚â°some3 : L‚ÇÅ [ 0 ] ‚â° some 3
L‚ÇÅ[0]‚â°some3 = refl

l‚ÇÅ‚ü¶0‚üß‚â°some3 : l‚ÇÅ ‚ü¶ 0 ‚üß ‚â° some 3
l‚ÇÅ‚ü¶0‚üß‚â°some3 = refl

L‚ÇÅ[n>0]‚â°none : ‚àÄ n ‚Üí n > 0 ‚Üí L‚ÇÅ [ n ] ‚â° none
L‚ÇÅ[n>0]‚â°none (suc n) _ = refl

l‚ÇÅ‚ü¶n>0‚üß‚â°none : ‚àÄ n ‚Üí n > 0 ‚Üí l‚ÇÅ ‚ü¶ n ‚üß ‚â° none
l‚ÇÅ‚ü¶n>0‚üß‚â°none (suc n) _ = refl

L‚ÇÉ[0]‚â°some1 : L‚ÇÉ [ 0 ] ‚â° some 1
L‚ÇÉ[0]‚â°some1 = refl

l‚ÇÉ‚ü¶0‚üß‚â°some1 : l‚ÇÉ ‚ü¶ 0 ‚üß ‚â° some 1
l‚ÇÉ‚ü¶0‚üß‚â°some1 = refl

L‚ÇÉ[0]‚â¢some2 : L‚ÇÉ [ 0 ] ‚â¢ some 2
L‚ÇÉ[0]‚â¢some2 = Œª ()

l‚ÇÉ[0]‚â¢some2 : l‚ÇÉ ‚ü¶ 0 ‚üß ‚â¢ some 2
l‚ÇÉ[0]‚â¢some2 = Œª ()

‚Ñì‚ÇÅ : Level
‚Ñì‚ÇÅ = lsuc ‚Ñì‚ÇÄ

